# Build options for use by CMake

include(CMakeDependentOption)

option(ENABLE_TINY_DEVICES "Reduce the build to console-only C components for resource-constrained targets" OFF)

set(_enable_installer_default ON)
if(ENABLE_TINY_DEVICES)
        set(_enable_installer_default OFF)
endif()
option(ENABLE_INSTALLER "Generate platform-specific installers" ${_enable_installer_default})

option(BUILD_wireshark     "Build Wireshark" ON)
option(BUILD_stratoshark   "Build Stratoshark" OFF)
if(BUILD_wireshark OR BUILD_stratoshark)
	option(USE_qt6     "Use Qt6 (preferred) instead of Qt5" ON)
endif()
option(BUILD_tshark        "Build tshark" ON)
option(BUILD_strato        "Build strato" ${BUILD_stratoshark})
option(BUILD_tfshark       "Build tfshark" OFF)
option(BUILD_rawshark      "Build rawshark" ON)
option(BUILD_dumpcap       "Build dumpcap" ON)
option(BUILD_text2pcap     "Build text2pcap" ON)
option(BUILD_mergecap      "Build mergecap" ON)
option(BUILD_reordercap    "Build reordercap" ON)
option(BUILD_editcap       "Build editcap" ON)
option(BUILD_capinfos      "Build capinfos" ON)
option(BUILD_captype       "Build captype" ON)
option(BUILD_randpkt       "Build randpkt" ON)
option(BUILD_dftest        "Build dftest" ON)
option(BUILD_corbaidl2wrs  "Build corbaidl2wrs" OFF)
option(BUILD_dcerpcidl2wrs "Build dcerpcidl2wrs" ON)
option(BUILD_xxx2deb       "Build xxx2deb" OFF)

option(BUILD_androiddump   "Build androiddump" ON)
option(BUILD_sshdump       "Build sshdump" ON)
option(BUILD_ciscodump     "Build ciscodump" ON)
option(BUILD_dpauxmon      "Build dpauxmon" ON)
option(BUILD_randpktdump   "Build randpktdump" ON)
option(BUILD_wifidump      "BUild wifidump" ON)
if(WIN32 AND NOT MINGW)
	option(BUILD_etwdump	   "Build etwdump" ON)
else()
	option(BUILD_etwdump	   "Build etwdump" OFF)
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
	option(BUILD_sdjournal   "Build sdjournal" ON)
else()
	option(BUILD_sdjournal   "Build sdjournal" OFF)
endif()
option(BUILD_udpdump       "Build udpdump" ON)

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
	cmake_dependent_option(BUILD_dumpcalls	"Build dumpcalls" ON "BUILD_stratoshark OR BUILD_strato" OFF)
else()
	cmake_dependent_option(BUILD_dumpcalls	"Build dumpcalls" OFF "BUILD_stratoshark OR BUILD_strato" OFF)
endif()
cmake_dependent_option(BUILD_falcodump	"Build falcodump" ON "BUILD_stratoshark OR BUILD_strato" OFF)
cmake_dependent_option(BUILD_sshdig	"Build sshdig" ON "BUILD_stratoshark OR BUILD_strato" OFF)

option(BUILD_sharkd        "Build sharkd" ON)
option(BUILD_mmdbresolve   "Build MaxMind DB resolver" ON)
option(BUILD_fuzzshark     "Build fuzzshark" OFF)

option(ENABLE_WERROR     "Treat warnings as errors" ON)
# Debugging is enabled for "Debug" build type.
option(ENABLE_DEBUG      "Enable debugging for all build configurations" OFF)
option(ENABLE_DEBUG_UTF_8  "Enable UTF-8 sanity checks (requires ENABLE_DEBUG)" ON)
option(ENABLE_DEBUG_A2W  "Enable line directive from .cnf file" OFF)
# Assertions are enabled for "Debug" and "RelWithDebInfo" build types.
option(ENABLE_ASSERT     "Enable assertions for all build configurations" OFF)

option(ENABLE_CCACHE     "Speed up compiling and linking using ccache if possible" OFF)
option(DISABLE_FRAME_LARGER_THAN_WARNING "Disable warning if the size of a function frame is large" OFF)
option(EXTCAP_ANDROIDDUMP_LIBPCAP    "Build androiddump using libpcap" OFF)
option(ENABLE_TODO_WARNINGS "Enable compiler warnings that are yet to be fixed" OFF)
option(ENABLE_PEDANTIC_WARNINGS "Enable pedantic or unfixable compiler warnings (noisy)" OFF)
option(ENABLE_CODE_ANALYSIS "Enable the compiler's static analyzer if possible" OFF)
option(ENABLE_ASAN "Enable AddressSanitizer (ASAN) for debugging (degrades performance)" OFF)
option(ENABLE_LSAN "Enable LeakSanitizer (LSAN) for debugging (less overhead than ASAN)" OFF)
option(ENABLE_TSAN "Enable ThreadSanitizer (TSan) for debugging" OFF)
option(ENABLE_UBSAN "Enable UndefinedBehaviorSanitizer (UBSan) for debugging" OFF)
option(ENABLE_FUZZER "Enable libFuzzer instrumentation for use with fuzzshark" OFF)
option(ENABLE_CHECKHF_CONFLICT "Enable hf conflict check for debugging (start-up may be slower)" OFF)

if(CMAKE_GENERATOR STREQUAL "Ninja")
	option(ENABLE_COMPILER_COLOR_DIAGNOSTICS "Always enable the compiler's color diagnostic output" ON)
else()
	option(ENABLE_COMPILER_COLOR_DIAGNOSTICS "Always enable the compiler's color diagnostic output" OFF)
endif()

option(ENABLE_LTO "Use Link Time Optimization (release configuration only)" OFF)

if(WIN32)
	option(ENABLE_VLD "Enable Visual Leak Detect in Debug configuration" OFF)
endif()

option(ENABLE_PCAP       "Enable libpcap support (required for capturing)" ON)
option(BUILD_SHARED_LIBS            "Build Wireshark libraries as shared" ON)
option(USE_STATIC               "Always link statically with external libraries" OFF)
option(ENABLE_PLUGINS           "Build with plugins" ON)
option(ENABLE_PLUGIN_IFDEMO     "Build with plugin interface demo" OFF)

option(ENABLE_ZLIB       "Build with zlib compression support" ON)
option(ENABLE_ZLIBNG     "Build with zlib-ng compression support" ON)
option(ENABLE_XXHASH     "Build with xxhash support" ON)
option(ENABLE_MINIZIP    "Build with zip file compression support" ON)
option(ENABLE_MINIZIPNG  "Build with zip file compression support" ON)
option(ENABLE_LZ4        "Build with LZ4 compression support" ON)
option(ENABLE_BROTLI     "Build with brotli compression support" ON)
option(ENABLE_SNAPPY     "Build with Snappy compression support" ON)
option(ENABLE_ZSTD       "Build with Facebook zstd compression support" ON)
option(ENABLE_NGHTTP2    "Build with HTTP/2 header decompression support" ON)
option(ENABLE_NGHTTP3    "Build with HTTP/3 header decompression support" ON)
option(ENABLE_LUA        "Build with Lua dissector support" ON)
option(ENABLE_SMI        "Build with libsmi snmp support" ON)
option(ENABLE_GNUTLS     "Build with RSA decryption support" ON)
if(WIN32 AND USE_REPOSITORY)
	option(ENABLE_WINSPARKLE "Enable automatic updates using WinSparkle" ON)
endif()
if (NOT WIN32)
	option(ENABLE_CAP        "Build with Posix capabilities support" ON)
endif()
if(UNIX)
	# Libnl is Linux-specific.
	if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
		set(_enable_libnl ON)
	endif()
	option(ENABLE_NETLINK    "Build with libnl support" ${_enable_libnl})
endif()
option(ENABLE_KERBEROS   "Build with Kerberos support" ON)
option(ENABLE_SBC        "Build with SBC Codec support in RTP Player" ON)
option(ENABLE_SPANDSP    "Build with G.722/G.726 codecs support in RTP Player" ON)
option(ENABLE_BCG729     "Build with G.729 codec support in RTP Player" ON)
option(ENABLE_AMRNB      "Build with AMRNB codec support in RTP Player" ON)
option(ENABLE_ILBC       "Build with iLBC codec support in RTP Player" ON)
option(ENABLE_OPUS       "Build with opus support" ON)
option(ENABLE_SINSP      "Build with libsinsp+libscap support" ON)

option(FETCH_lua         "Download and build Lua" OFF)

# How to install
set(DUMPCAP_INSTALL_OPTION   "normal" CACHE STRING "Permissions to install")
set_property(CACHE DUMPCAP_INSTALL_OPTION PROPERTY STRINGS "normal" "suid" "capabilities")

if(UNIX)
	option(ENABLE_DUMPCAP_GROUP "Install dumpcap with group ownership and permissions (default \"wireshark\")" OFF)
	set(DUMPCAP_INSTALL_GROUP "wireshark" CACHE STRING "Group name for dumpcap (must exist)")
endif()

if(APPLE)
        option(ENABLE_APPLICATION_BUNDLE "Build a macOS application bundle (Wireshark.app)" ON)
        option(ENABLE_SPARKLE "Enable automatic updates using Sparkle" ON)
endif()

if(WIN32)
        # Enable signing of NSIS installer by default only if we have 'sign-wireshark.bat' on the path
        # of the host system.
        set(_enable_signed_nsis False)
        if(CMAKE_HOST_WIN32)
                find_file(SIGN_WIRESHARK_BAT "sign-wireshark.bat")
                if (SIGN_WIRESHARK_BAT)
                        set(_enable_signed_nsis True)
                endif()
        endif()
        option(ENABLE_SIGNED_NSIS         "Enable the code signing step of the NSIS installer build" ${_enable_signed_nsis})

        # Advanced options for developers to work-around limitations in the build
        # when cross-compiling to Windows.
        option(SKIP_NSIS_QT_DLLS    "Skip deploying Qt runtime DLLs with installer" OFF)
        mark_as_advanced(SKIP_NSIS_QT_DLLS)
endif()

if(ENABLE_TINY_DEVICES)
        set(BUILD_wireshark OFF CACHE BOOL "Build Wireshark" FORCE)
        set(BUILD_stratoshark OFF CACHE BOOL "Build Stratoshark" FORCE)
        set(BUILD_strato OFF CACHE BOOL "Build strato" FORCE)
        set(BUILD_tfshark OFF CACHE BOOL "Build tfshark" FORCE)
        set(BUILD_rawshark OFF CACHE BOOL "Build rawshark" FORCE)
        set(BUILD_randpkt OFF CACHE BOOL "Build randpkt" FORCE)
        set(BUILD_randpktdump OFF CACHE BOOL "Build randpktdump" FORCE)
        set(BUILD_dftest OFF CACHE BOOL "Build dftest" FORCE)
        set(BUILD_androiddump OFF CACHE BOOL "Build androiddump" FORCE)
        set(BUILD_sshdump OFF CACHE BOOL "Build sshdump" FORCE)
        set(BUILD_ciscodump OFF CACHE BOOL "Build ciscodump" FORCE)
        set(BUILD_dpauxmon OFF CACHE BOOL "Build dpauxmon" FORCE)
        set(BUILD_wifidump OFF CACHE BOOL "Build wifidump" FORCE)
        set(BUILD_etwdump OFF CACHE BOOL "Build etwdump" FORCE)
        set(BUILD_sdjournal OFF CACHE BOOL "Build sdjournal" FORCE)
        set(BUILD_udpdump OFF CACHE BOOL "Build udpdump" FORCE)
        set(BUILD_dumpcalls OFF CACHE BOOL "Build dumpcalls" FORCE)
        set(BUILD_falcodump OFF CACHE BOOL "Build falcodump" FORCE)
        set(BUILD_sshdig OFF CACHE BOOL "Build sshdig" FORCE)
        set(BUILD_sharkd OFF CACHE BOOL "Build sharkd" FORCE)
        set(BUILD_mmdbresolve OFF CACHE BOOL "Build MaxMind DB resolver" FORCE)
        set(ENABLE_PLUGINS OFF CACHE BOOL "Build with plugins" FORCE)
        set(ENABLE_PLUGIN_IFDEMO OFF CACHE BOOL "Build with plugin interface demo" FORCE)
        set(ENABLE_LUA OFF CACHE BOOL "Build with Lua dissector support" FORCE)
        # Keep the capture stack available so embedded devices can stream packets
        # to dumpcap/tshark when libpcap is provided by the toolchain.
        set(ENABLE_CHECKHF_CONFLICT ON CACHE BOOL "Enable hf conflict check for debugging (start-up may be slower)" FORCE)
        set(ENABLE_SMI OFF CACHE BOOL "Build with libsmi snmp support" FORCE)
        set(ENABLE_GNUTLS OFF CACHE BOOL "Build with RSA decryption support" FORCE)
        set(ENABLE_ZLIB OFF CACHE BOOL "Build with zlib compression support" FORCE)
        set(ENABLE_ZLIBNG OFF CACHE BOOL "Build with zlib-ng compression support" FORCE)
        set(ENABLE_MINIZIP OFF CACHE BOOL "Build with zip file compression support" FORCE)
        set(ENABLE_MINIZIPNG OFF CACHE BOOL "Build with zip file compression support" FORCE)
        set(ENABLE_LZ4 OFF CACHE BOOL "Build with LZ4 compression support" FORCE)
        set(ENABLE_BROTLI OFF CACHE BOOL "Build with brotli compression support" FORCE)
        set(ENABLE_SNAPPY OFF CACHE BOOL "Build with Snappy compression support" FORCE)
        set(ENABLE_ZSTD OFF CACHE BOOL "Build with Facebook zstd compression support" FORCE)
        set(ENABLE_NGHTTP2 OFF CACHE BOOL "Build with HTTP/2 header decompression support" FORCE)
        set(ENABLE_NGHTTP3 OFF CACHE BOOL "Build with HTTP/3 header decompression support" FORCE)
        set(ENABLE_KERBEROS OFF CACHE BOOL "Build with Kerberos support" FORCE)
        set(ENABLE_SBC OFF CACHE BOOL "Build with SBC Codec support in RTP Player" FORCE)
        set(ENABLE_SPANDSP OFF CACHE BOOL "Build with G.722/G.726 codecs support in RTP Player" FORCE)
        set(ENABLE_BCG729 OFF CACHE BOOL "Build with G.729 codec support in RTP Player" FORCE)
        set(ENABLE_AMRNB OFF CACHE BOOL "Build with AMRNB codec support in RTP Player" FORCE)
        set(ENABLE_ILBC OFF CACHE BOOL "Build with iLBC codec support in RTP Player" FORCE)
        set(ENABLE_OPUS OFF CACHE BOOL "Build with opus support" FORCE)
        set(ENABLE_SINSP OFF CACHE BOOL "Build with libsinsp+libscap support" FORCE)
        set(FETCH_lua OFF CACHE BOOL "Download and build Lua" FORCE)
        if(APPLE)
                set(ENABLE_APPLICATION_BUNDLE OFF CACHE BOOL "Build a macOS application bundle (Wireshark.app)" FORCE)
                set(ENABLE_SPARKLE OFF CACHE BOOL "Enable automatic updates using Sparkle" FORCE)
        endif()
        if(WIN32)
                set(ENABLE_SIGNED_NSIS OFF CACHE BOOL "Enable the code signing step of the NSIS installer build" FORCE)
                set(SKIP_NSIS_QT_DLLS ON CACHE BOOL "Skip deploying Qt runtime DLLs with installer" FORCE)
        endif()
endif()
